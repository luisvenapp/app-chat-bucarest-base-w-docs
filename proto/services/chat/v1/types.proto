syntax = "proto3";

package services.chat.v1;

// For validations rules, check the https://github.com/bufbuild/protovalidate repo
// import "buf/validate/validate.proto";

// Enums
enum MessageStatus {
  MESSAGE_STATUS_UNSPECIFIED = 0;
  MESSAGE_STATUS_SENDING = 1;
  MESSAGE_STATUS_SENT = 2;
  MESSAGE_STATUS_DELIVERED = 3;
  MESSAGE_STATUS_READ = 4;
  MESSAGE_STATUS_ERROR = 5;
}

// Estrategia de sincronización
enum SyncStrategy {
  SYNC_STRATEGY_UNSPECIFIED = 0;
  SYNC_STRATEGY_FULL = 1; // Historial completo
  SYNC_STRATEGY_RECENT = 2; // Solo mensajes recientes (30 días)
  SYNC_STRATEGY_MINIMAL = 3; // Solo último mensaje
  SYNC_STRATEGY_SMART = 4; // Inteligente según condiciones
}

// Estructuras de datos principales
message Room {
  string id = 1;
  string name = 2;
  string description = 3;
  string photo_url = 4;
  string encryption_data = 5;
  string type = 6;
  int32 unread_count = 7;
  string role = 8;
  bool join_all_user = 10;
  string last_message_at = 11;
  bool send_message = 12;
  bool add_member = 13;
  bool edit_group = 14;
  string created_at = 15; // ISO 8601
  string updated_at = 16; // ISO 8601
  optional RoomParticipant partner = 17;
  repeated RoomParticipant participants = 18;
  bool is_partner_blocked = 19;
  bool is_muted = 20;
  bool is_pinned = 21;
  MessageData last_message = 22;
}

message RoomParticipant {
  int32 id = 1;
  string phone = 2;
  string name = 3;
  string avatar = 4;
  string role = 5;
  bool is_partner_blocked = 6;
  bool is_partner_muted = 7;
}

message Mention {
  string id = 1;
  string name = 2;
  string tag = 3;
  string phone = 4;
  string message_id = 5;
}

message Reaction {
  string id = 1;
  string reaction = 2;
  string message_id = 3;
  string reacted_by_id = 4;
  string reacted_by_name = 5;
  string reacted_by_avatar = 6;
  string reacted_by_phone = 7;
}

message MessageData {
  string id = 1;
  string room_id = 2;
  int32 sender_id = 3;
  string sender_name = 4;
  string sender_avatar = 5;
  string sender_phone = 6;
  string content = 7;
  optional MessageData reply = 8;
  optional string forwarded_message_id = 9;
  optional int32 forwarded_message_sender_id = 10;
  optional string forwarded_message_sender_name = 11;
  optional string forwarded_message_sender_avatar = 12;
  optional string forwarded_message_sender_phone = 13;
  repeated Mention mentions = 14;
  MessageStatus status = 15;
  string created_at = 16; // ISO 8601
  string updated_at = 17; // ISO 8601
  string type = 18;
  bool edited = 19;
  bool is_deleted = 20;
  optional string audio_transcription = 21;
  optional string lifetime = 22;
  optional string location_name = 23;
  optional double location_latitude = 24;
  optional double location_longitude = 25;
  optional string origin = 26;
  optional string contact_id = 27;
  optional string contact_name = 28;
  optional string contact_phone = 29;
  optional string file = 30;
  repeated Reaction reactions = 31;
  optional string event = 32;
  optional string sender_message_id = 33;
}

message RoomJoinEvent {
  int32 user_id = 1;
  string joined_at = 2; // ISO 8601
  optional string display_name = 3; // Nombre a mostrar en la sala
  int32 owner_user_id = 4;
}

message RoomLeaveEvent {
  repeated int32 users_id = 1;
  string left_at = 2; // ISO 8601
  optional string reason = 3; // Razón opcional (ej: "user left", "kicked", etc.)
}

message TypingEvent {
  int32 user_id = 1;
  bool is_typing = 2; // true = empezó a escribir, false = dejó de escribir
  string updated_at = 3; // ISO 8601
}

message MessageStatusUpdate {
  string message_id = 1;
  MessageStatus status = 2;
  string updated_at = 3; // ISO 8601
  int32 user_id = 4;
  int32 sender_id = 5;
}

message ErrorEvent {
  string code = 1;
  string message = 2;
  string details = 3;
}

// Eventos para el stream
message MessageEvent {
  optional Room room = 1;
  string room_id = 2;
  string event_id = 100;

  oneof event {
    // Eventos de mensajes
    MessageData message = 3;
    MessageStatusUpdate status_update = 4;

    // Eventos de sala
    bool is_room_updated = 5;
    RoomJoinEvent room_join = 6;
    RoomLeaveEvent room_leave = 7;

    // Eventos de typing
    TypingEvent typing = 8;

    // Eventos de error
    ErrorEvent error = 9;

    // Evento de edición de mensaje
    MessageData update_message = 10;

    // Evento de eliminación de mensaje
    string delete_message = 11;

    // Evento de ping de conexión (para evitar que se muera)
    bool connected = 12;
  }
}

message CreateMention {
  string tag = 1;
  string user = 2;
}

message SendMessageRequest {
  string room_id = 1;
  string content = 2;
  optional string reply_id = 3;
  repeated CreateMention mentions = 4;
  string type = 5;
  optional string lifetime = 6;
  optional string location_name = 7;
  optional double location_latitude = 8;
  optional double location_longitude = 9;
  optional string origin = 10;
  optional string contact_name = 11;
  optional string contact_phone = 12;
  optional string file = 13;
  optional string forward_id = 14;
  optional string event = 15;
  optional string sender_message_id = 16;
}

message SendMessageResponse {
  MessageData message = 1;
  bool success = 2;
  optional string error_message = 3;
}

message EditMessageRequest {
  string message_id = 1;
  string new_content = 2;
}

message EditMessageResponse {
  MessageData message = 1;
  bool success = 2;
  optional string error_message = 3;
}

message DeleteMessageRequest {
  string room_id = 1;
  repeated string message_ids = 2;
}

message DeleteMessageResponse {
  bool success = 1;
  optional string error_message = 2;
}

message MarkMessagesAsReadRequest {
  string room_id = 1;
  repeated string message_ids = 2;
}

message MarkMessagesAsReadResponse {
  bool success = 1;
  int32 marked_count = 2;
  optional string error_message = 3;
}

message GetMessageHistoryRequest {
  string id = 1;
  uint32 page = 2;
  uint32 limit = 3;
  optional string before_message_id = 4; // Para paginación
  optional string before_date = 5; // ISO 8601
  optional string after_message_id = 6; // Para paginación
  optional string after_date = 7; // ISO 8601
  uint32 messages_per_room = 8; // Máximo 100 mensajes por room
}

message GetMessageHistoryResponse {
  repeated MessageData items = 1;
  PaginationMeta meta = 2;
}

// Request para obtener rooms
message GetRoomsRequest {
  uint32 page = 1;
  uint32 limit = 2; // Máximo 50 rooms por request
  string search = 3;
  string type = 4;
  string since = 5;
}

// Response para obtener rooms
message GetRoomsResponse {
  repeated Room items = 1;
  PaginationMeta meta = 2;
}

// Request para sincronización inicial
message InitialSyncRequest {
  string last_sync_timestamp = 1; // ISO 8601, opcional
  SyncStrategy sync_strategy = 2;
  int32 messages_per_room = 3; // Máximo 100 mensajes por room
  bool include_archived_rooms = 4;
}

// Response para sincronización inicial
message InitialSyncResponse {
  repeated Room rooms = 1;
  repeated string rooms_deleted = 2;
  repeated MessageData messages = 3;
  string sync_timestamp = 4; // ISO 8601
  SyncSummary summary = 5;
}

// Room con mensajes incluidos
message RoomWithMessages {
  Room room = 1;
  repeated MessageData messages = 2;
  int32 total_messages = 3;
  bool has_more_messages = 4;
}

// Resumen de sincronización
message SyncSummary {
  int32 rooms_synced = 1;
  int32 rooms_deleted = 2;
  int32 messages_synced = 3;
  string sync_duration_ms = 4;
}

message PaginationMeta {
  uint32 total_items = 1;
  uint32 item_count = 2;
  uint32 items_per_page = 3;
  uint32 total_pages = 4;
  uint32 current_page = 5;
}

message StreamMessagesRequest {
  optional string room_id = 1;
}

message CreateRoomRequest {
  string type = 1;
  optional string name = 2;
  optional string description = 3;
  optional string photo_url = 4;
  optional bool send_message = 6;
  optional bool add_member = 7;
  optional bool edit_group = 8;
  repeated int32 participants = 10;
}

message CreateRoomResponse {
  bool success = 1;
  optional string error_message = 2;
  optional Room room = 3;
}

message PinRoomRequest {
  string id = 1;
}

message PinRoomResponse {
  bool success = 1;
  optional string error_message = 2;
}

message MuteRoomRequest {
  string id = 1;
}

message MuteRoomResponse {
  bool success = 1;
  optional string error_message = 2;
}

message JoinRoomRequest {
  string id = 1;
  repeated RoomParticipant participants = 2;
}

message JoinRoomResponse {
  bool success = 1;
  optional string error_message = 2;
  optional Room room = 3;
}

message LeaveRoomRequest {
  string id = 1;
  repeated int32 participants = 2; // Participante en caso de que se quiera expulsar a otro
  bool leave_all = 3;
}

message LeaveRoomResponse {
  bool success = 1;
  optional string error_message = 2;
}

message GetRoomRequest {
  string id = 1;
}

message GetRoomResponse {
  bool success = 1;
  optional string error_message = 2;
  optional Room room = 3;
}

message GetRoomParticipantsRequest {
  string id = 1;
  uint32 page = 2;
  uint32 limit = 3;
  string search = 4;
}

message GetRoomParticipantsResponse {
  repeated RoomParticipant participants = 1;
  PaginationMeta meta = 2;
}

message UpdateRoomRequest {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string photo_url = 4;
  optional bool send_message = 5;
  optional bool add_member = 6;
  optional bool edit_group = 7;
}

message UpdateRoomResponse {
  bool success = 1;
  optional string error_message = 2;
}

message AddParticipantToRoomRequest {
  string id = 1;
  repeated int32 participants = 2;
}

message AddParticipantToRoomResponse {
  bool success = 1;
  optional string error_message = 2;
}

message UpdateParticipantRoomRequest {
  string id = 1;
  int32 participant = 2;
  string role = 3;
}

message UpdateParticipantRoomResponse {
  bool success = 1;
  optional string error_message = 2;
}

message BlockUserRequest {
  string id = 1;
}

message BlockUserResponse {
  bool success = 1;
  optional string error_message = 2;
}

message GetMessageRequest {
  string id = 1;
}

message GetSenderMessageRequest {
  string sender_message_id = 1;
}

message GetSenderMessageResponse {
  MessageStatus status = 1;
}

message ReactToMessageRequest {
  string message_id = 1;
  string reaction = 2;
}

message ReactToMessageResponse {
  bool success = 1;
  optional string error_message = 2;
}

message GetMessageReadRequest {
  string id = 1;
  uint32 page = 2;
  uint32 limit = 3;
}

message MessageUserRead {
  int32 user_id = 1;
  string user_name = 2;
  string user_avatar = 3;
  string user_phone = 4;
  string read_at = 5;
}

message GetMessageReadResponse {
  repeated MessageUserRead items = 1;
  PaginationMeta meta = 2;
}

message GetMessageReactionsRequest {
  string id = 1;
  uint32 page = 2;
  uint32 limit = 3;
}

message GetMessageReactionsResponse {
  repeated Reaction items = 1;
  PaginationMeta meta = 2;
}
