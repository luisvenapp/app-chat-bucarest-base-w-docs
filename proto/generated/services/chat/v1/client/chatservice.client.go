// Code generated by campaing-app-api-cli. DO NOT EDIT.
//
// source: services/chat/v1/service.proto

package chatv1client

import (
	context "context"
	tls "crypto/tls"
	log "log"
	net "net"
	http "net/http"
	strings "strings"
	sync "sync"

	connect "connectrpc.com/connect"
	catalogs "github.com/Venqis-NolaTech/campaing-app-chat-messages-api-go/catalogs"
	v1 "github.com/Venqis-NolaTech/campaing-app-chat-messages-api-go/proto/generated/services/chat/v1"
	chatv1connect "github.com/Venqis-NolaTech/campaing-app-chat-messages-api-go/proto/generated/services/chat/v1/chatv1connect"
	api "github.com/Venqis-NolaTech/campaing-app-core-go/pkg/api"
	http2 "golang.org/x/net/http2"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

var (
	muChatService            = sync.Mutex{}
	clientsChatService       = map[string]chatv1connect.ChatServiceClient{}
	h2cHttpChatServiceClient = &http.Client{
		CheckRedirect: func(_ *http.Request, _ []*http.Request) error {
			return http.ErrUseLastResponse
		},
		Transport: &http2.Transport{
			AllowHTTP: true,
			DialTLS: func(network, addr string, _ *tls.Config) (net.Conn, error) {
				return net.Dial(network, addr)
			},
		},
	}
)

func instanceNewChatServiceClient(addr string) chatv1connect.ChatServiceClient {
	client := h2cHttpChatServiceClient
	if strings.HasPrefix(addr, "https://") {
		client = &http.Client{}
	}
	return chatv1connect.NewChatServiceClient(
		client,
		addr,
		connect.WithHTTPGet(),
	)
}

// Instance a new client for `services.chat.v1.ChatService`
func GetChatServiceClient() chatv1connect.ChatServiceClient {
	addr := catalogs.ClientAddress()
	var client chatv1connect.ChatServiceClient
	muChatService.Lock()
	defer muChatService.Unlock()
	if c, ok := clientsChatService[addr]; ok && c != nil {
		client = c
	} else {
		client = instanceNewChatServiceClient(addr)
		clientsChatService[addr] = client
	}
	return client
}

// Do a remote call for `services.chat.v1.ChatService@SendMessage(v1.SendMessageRequest) -> v1.SendMessageResponse`
// This method requires a `api.GeneralParams` argument
func SendMessage(ctx context.Context, generalParams api.GeneralParams, req *v1.SendMessageRequest) (*v1.SendMessageResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@SendMessage(v1.SendMessageRequest) -> v1.SendMessageResponse")
	log.Printf("UNARY GRPC REQUEST: v1.SendMessageRequest -> %s\n", string(jsonReq))
	var response *v1.SendMessageResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().SendMessage(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.SendMessageResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@EditMessage(v1.EditMessageRequest) -> v1.EditMessageResponse`
// This method requires a `api.GeneralParams` argument
func EditMessage(ctx context.Context, generalParams api.GeneralParams, req *v1.EditMessageRequest) (*v1.EditMessageResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@EditMessage(v1.EditMessageRequest) -> v1.EditMessageResponse")
	log.Printf("UNARY GRPC REQUEST: v1.EditMessageRequest -> %s\n", string(jsonReq))
	var response *v1.EditMessageResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().EditMessage(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.EditMessageResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@DeleteMessage(v1.DeleteMessageRequest) -> v1.DeleteMessageResponse`
// This method requires a `api.GeneralParams` argument
func DeleteMessage(ctx context.Context, generalParams api.GeneralParams, req *v1.DeleteMessageRequest) (*v1.DeleteMessageResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@DeleteMessage(v1.DeleteMessageRequest) -> v1.DeleteMessageResponse")
	log.Printf("UNARY GRPC REQUEST: v1.DeleteMessageRequest -> %s\n", string(jsonReq))
	var response *v1.DeleteMessageResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().DeleteMessage(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.DeleteMessageResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@ReactToMessage(v1.ReactToMessageRequest) -> v1.ReactToMessageResponse`
// This method requires a `api.GeneralParams` argument
func ReactToMessage(ctx context.Context, generalParams api.GeneralParams, req *v1.ReactToMessageRequest) (*v1.ReactToMessageResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@ReactToMessage(v1.ReactToMessageRequest) -> v1.ReactToMessageResponse")
	log.Printf("UNARY GRPC REQUEST: v1.ReactToMessageRequest -> %s\n", string(jsonReq))
	var response *v1.ReactToMessageResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().ReactToMessage(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.ReactToMessageResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@GetRooms(v1.GetRoomsRequest) -> v1.GetRoomsResponse`
// This method requires a `api.GeneralParams` argument
func GetRooms(ctx context.Context, generalParams api.GeneralParams, req *v1.GetRoomsRequest) (*v1.GetRoomsResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@GetRooms(v1.GetRoomsRequest) -> v1.GetRoomsResponse")
	log.Printf("UNARY GRPC REQUEST: v1.GetRoomsRequest -> %s\n", string(jsonReq))
	var response *v1.GetRoomsResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().GetRooms(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.GetRoomsResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@CreateRoom(v1.CreateRoomRequest) -> v1.CreateRoomResponse`
// This method requires a `api.GeneralParams` argument
func CreateRoom(ctx context.Context, generalParams api.GeneralParams, req *v1.CreateRoomRequest) (*v1.CreateRoomResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@CreateRoom(v1.CreateRoomRequest) -> v1.CreateRoomResponse")
	log.Printf("UNARY GRPC REQUEST: v1.CreateRoomRequest -> %s\n", string(jsonReq))
	var response *v1.CreateRoomResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().CreateRoom(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.CreateRoomResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@GetRoom(v1.GetRoomRequest) -> v1.GetRoomResponse`
// This method requires a `api.GeneralParams` argument
func GetRoom(ctx context.Context, generalParams api.GeneralParams, req *v1.GetRoomRequest) (*v1.GetRoomResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@GetRoom(v1.GetRoomRequest) -> v1.GetRoomResponse")
	log.Printf("UNARY GRPC REQUEST: v1.GetRoomRequest -> %s\n", string(jsonReq))
	var response *v1.GetRoomResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().GetRoom(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.GetRoomResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@GetMessageHistory(v1.GetMessageHistoryRequest) -> v1.GetMessageHistoryResponse`
// This method requires a `api.GeneralParams` argument
func GetMessageHistory(ctx context.Context, generalParams api.GeneralParams, req *v1.GetMessageHistoryRequest) (*v1.GetMessageHistoryResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@GetMessageHistory(v1.GetMessageHistoryRequest) -> v1.GetMessageHistoryResponse")
	log.Printf("UNARY GRPC REQUEST: v1.GetMessageHistoryRequest -> %s\n", string(jsonReq))
	var response *v1.GetMessageHistoryResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().GetMessageHistory(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.GetMessageHistoryResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@GetRoomParticipants(v1.GetRoomParticipantsRequest) -> v1.GetRoomParticipantsResponse`
// This method requires a `api.GeneralParams` argument
func GetRoomParticipants(ctx context.Context, generalParams api.GeneralParams, req *v1.GetRoomParticipantsRequest) (*v1.GetRoomParticipantsResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@GetRoomParticipants(v1.GetRoomParticipantsRequest) -> v1.GetRoomParticipantsResponse")
	log.Printf("UNARY GRPC REQUEST: v1.GetRoomParticipantsRequest -> %s\n", string(jsonReq))
	var response *v1.GetRoomParticipantsResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().GetRoomParticipants(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.GetRoomParticipantsResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@PinRoom(v1.PinRoomRequest) -> v1.PinRoomResponse`
// This method requires a `api.GeneralParams` argument
func PinRoom(ctx context.Context, generalParams api.GeneralParams, req *v1.PinRoomRequest) (*v1.PinRoomResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@PinRoom(v1.PinRoomRequest) -> v1.PinRoomResponse")
	log.Printf("UNARY GRPC REQUEST: v1.PinRoomRequest -> %s\n", string(jsonReq))
	var response *v1.PinRoomResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().PinRoom(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.PinRoomResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@MuteRoom(v1.MuteRoomRequest) -> v1.MuteRoomResponse`
// This method requires a `api.GeneralParams` argument
func MuteRoom(ctx context.Context, generalParams api.GeneralParams, req *v1.MuteRoomRequest) (*v1.MuteRoomResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@MuteRoom(v1.MuteRoomRequest) -> v1.MuteRoomResponse")
	log.Printf("UNARY GRPC REQUEST: v1.MuteRoomRequest -> %s\n", string(jsonReq))
	var response *v1.MuteRoomResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().MuteRoom(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.MuteRoomResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@LeaveRoom(v1.LeaveRoomRequest) -> v1.LeaveRoomResponse`
// This method requires a `api.GeneralParams` argument
func LeaveRoom(ctx context.Context, generalParams api.GeneralParams, req *v1.LeaveRoomRequest) (*v1.LeaveRoomResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@LeaveRoom(v1.LeaveRoomRequest) -> v1.LeaveRoomResponse")
	log.Printf("UNARY GRPC REQUEST: v1.LeaveRoomRequest -> %s\n", string(jsonReq))
	var response *v1.LeaveRoomResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().LeaveRoom(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.LeaveRoomResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@AddParticipantToRoom(v1.AddParticipantToRoomRequest) -> v1.AddParticipantToRoomResponse`
// This method requires a `api.GeneralParams` argument
func AddParticipantToRoom(ctx context.Context, generalParams api.GeneralParams, req *v1.AddParticipantToRoomRequest) (*v1.AddParticipantToRoomResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@AddParticipantToRoom(v1.AddParticipantToRoomRequest) -> v1.AddParticipantToRoomResponse")
	log.Printf("UNARY GRPC REQUEST: v1.AddParticipantToRoomRequest -> %s\n", string(jsonReq))
	var response *v1.AddParticipantToRoomResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().AddParticipantToRoom(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.AddParticipantToRoomResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@UpdateRoom(v1.UpdateRoomRequest) -> v1.UpdateRoomResponse`
// This method requires a `api.GeneralParams` argument
func UpdateRoom(ctx context.Context, generalParams api.GeneralParams, req *v1.UpdateRoomRequest) (*v1.UpdateRoomResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@UpdateRoom(v1.UpdateRoomRequest) -> v1.UpdateRoomResponse")
	log.Printf("UNARY GRPC REQUEST: v1.UpdateRoomRequest -> %s\n", string(jsonReq))
	var response *v1.UpdateRoomResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().UpdateRoom(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.UpdateRoomResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@UpdateParticipantRoom(v1.UpdateParticipantRoomRequest) -> v1.UpdateParticipantRoomResponse`
// This method requires a `api.GeneralParams` argument
func UpdateParticipantRoom(ctx context.Context, generalParams api.GeneralParams, req *v1.UpdateParticipantRoomRequest) (*v1.UpdateParticipantRoomResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@UpdateParticipantRoom(v1.UpdateParticipantRoomRequest) -> v1.UpdateParticipantRoomResponse")
	log.Printf("UNARY GRPC REQUEST: v1.UpdateParticipantRoomRequest -> %s\n", string(jsonReq))
	var response *v1.UpdateParticipantRoomResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().UpdateParticipantRoom(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.UpdateParticipantRoomResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@BlockUser(v1.BlockUserRequest) -> v1.BlockUserResponse`
// This method requires a `api.GeneralParams` argument
func BlockUser(ctx context.Context, generalParams api.GeneralParams, req *v1.BlockUserRequest) (*v1.BlockUserResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@BlockUser(v1.BlockUserRequest) -> v1.BlockUserResponse")
	log.Printf("UNARY GRPC REQUEST: v1.BlockUserRequest -> %s\n", string(jsonReq))
	var response *v1.BlockUserResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().BlockUser(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.BlockUserResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@GetSenderMessage(v1.GetSenderMessageRequest) -> v1.GetSenderMessageResponse`
// This method requires a `api.GeneralParams` argument
func GetSenderMessage(ctx context.Context, generalParams api.GeneralParams, req *v1.GetSenderMessageRequest) (*v1.GetSenderMessageResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@GetSenderMessage(v1.GetSenderMessageRequest) -> v1.GetSenderMessageResponse")
	log.Printf("UNARY GRPC REQUEST: v1.GetSenderMessageRequest -> %s\n", string(jsonReq))
	var response *v1.GetSenderMessageResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().GetSenderMessage(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.GetSenderMessageResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@GetMessage(v1.GetMessageRequest) -> v1.MessageData`
// This method requires a `api.GeneralParams` argument
func GetMessage(ctx context.Context, generalParams api.GeneralParams, req *v1.GetMessageRequest) (*v1.MessageData, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@GetMessage(v1.GetMessageRequest) -> v1.MessageData")
	log.Printf("UNARY GRPC REQUEST: v1.GetMessageRequest -> %s\n", string(jsonReq))
	var response *v1.MessageData
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().GetMessage(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.MessageData -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@GetMessageRead(v1.GetMessageReadRequest) -> v1.GetMessageReadResponse`
// This method requires a `api.GeneralParams` argument
func GetMessageRead(ctx context.Context, generalParams api.GeneralParams, req *v1.GetMessageReadRequest) (*v1.GetMessageReadResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@GetMessageRead(v1.GetMessageReadRequest) -> v1.GetMessageReadResponse")
	log.Printf("UNARY GRPC REQUEST: v1.GetMessageReadRequest -> %s\n", string(jsonReq))
	var response *v1.GetMessageReadResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().GetMessageRead(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.GetMessageReadResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@GetMessageReactions(v1.GetMessageReactionsRequest) -> v1.GetMessageReactionsResponse`
// This method requires a `api.GeneralParams` argument
func GetMessageReactions(ctx context.Context, generalParams api.GeneralParams, req *v1.GetMessageReactionsRequest) (*v1.GetMessageReactionsResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@GetMessageReactions(v1.GetMessageReactionsRequest) -> v1.GetMessageReactionsResponse")
	log.Printf("UNARY GRPC REQUEST: v1.GetMessageReactionsRequest -> %s\n", string(jsonReq))
	var response *v1.GetMessageReactionsResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().GetMessageReactions(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.GetMessageReactionsResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@MarkMessagesAsRead(v1.MarkMessagesAsReadRequest) -> v1.MarkMessagesAsReadResponse`
// This method requires a `api.GeneralParams` argument
func MarkMessagesAsRead(ctx context.Context, generalParams api.GeneralParams, req *v1.MarkMessagesAsReadRequest) (*v1.MarkMessagesAsReadResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@MarkMessagesAsRead(v1.MarkMessagesAsReadRequest) -> v1.MarkMessagesAsReadResponse")
	log.Printf("UNARY GRPC REQUEST: v1.MarkMessagesAsReadRequest -> %s\n", string(jsonReq))
	var response *v1.MarkMessagesAsReadResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().MarkMessagesAsRead(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.MarkMessagesAsReadResponse -> %s\n", string(jsonRes))
	}
	return response, err
}

// Do a remote call for `services.chat.v1.ChatService@InitialSync(v1.InitialSyncRequest) -> v1.InitialSyncResponse`
// This method requires a `api.GeneralParams` argument
func InitialSync(ctx context.Context, generalParams api.GeneralParams, req *v1.InitialSyncRequest) (*v1.InitialSyncResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.chat.v1.ChatService@InitialSync(v1.InitialSyncRequest) -> v1.InitialSyncResponse")
	log.Printf("UNARY GRPC REQUEST: v1.InitialSyncRequest -> %s\n", string(jsonReq))
	var response *v1.InitialSyncResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetChatServiceClient().InitialSync(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.InitialSyncResponse -> %s\n", string(jsonRes))
	}
	return response, err
}
