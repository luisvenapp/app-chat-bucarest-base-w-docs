// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/chat/v1/service.proto

package chatv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Venqis-NolaTech/campaing-app-chat-messages-api-go/proto/generated/services/chat/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "services.chat.v1.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceSendMessageProcedure is the fully-qualified name of the ChatService's SendMessage RPC.
	ChatServiceSendMessageProcedure = "/services.chat.v1.ChatService/SendMessage"
	// ChatServiceEditMessageProcedure is the fully-qualified name of the ChatService's EditMessage RPC.
	ChatServiceEditMessageProcedure = "/services.chat.v1.ChatService/EditMessage"
	// ChatServiceDeleteMessageProcedure is the fully-qualified name of the ChatService's DeleteMessage
	// RPC.
	ChatServiceDeleteMessageProcedure = "/services.chat.v1.ChatService/DeleteMessage"
	// ChatServiceReactToMessageProcedure is the fully-qualified name of the ChatService's
	// ReactToMessage RPC.
	ChatServiceReactToMessageProcedure = "/services.chat.v1.ChatService/ReactToMessage"
	// ChatServiceGetRoomsProcedure is the fully-qualified name of the ChatService's GetRooms RPC.
	ChatServiceGetRoomsProcedure = "/services.chat.v1.ChatService/GetRooms"
	// ChatServiceCreateRoomProcedure is the fully-qualified name of the ChatService's CreateRoom RPC.
	ChatServiceCreateRoomProcedure = "/services.chat.v1.ChatService/CreateRoom"
	// ChatServiceGetRoomProcedure is the fully-qualified name of the ChatService's GetRoom RPC.
	ChatServiceGetRoomProcedure = "/services.chat.v1.ChatService/GetRoom"
	// ChatServiceGetMessageHistoryProcedure is the fully-qualified name of the ChatService's
	// GetMessageHistory RPC.
	ChatServiceGetMessageHistoryProcedure = "/services.chat.v1.ChatService/GetMessageHistory"
	// ChatServiceGetRoomParticipantsProcedure is the fully-qualified name of the ChatService's
	// GetRoomParticipants RPC.
	ChatServiceGetRoomParticipantsProcedure = "/services.chat.v1.ChatService/GetRoomParticipants"
	// ChatServicePinRoomProcedure is the fully-qualified name of the ChatService's PinRoom RPC.
	ChatServicePinRoomProcedure = "/services.chat.v1.ChatService/PinRoom"
	// ChatServiceMuteRoomProcedure is the fully-qualified name of the ChatService's MuteRoom RPC.
	ChatServiceMuteRoomProcedure = "/services.chat.v1.ChatService/MuteRoom"
	// ChatServiceLeaveRoomProcedure is the fully-qualified name of the ChatService's LeaveRoom RPC.
	ChatServiceLeaveRoomProcedure = "/services.chat.v1.ChatService/LeaveRoom"
	// ChatServiceAddParticipantToRoomProcedure is the fully-qualified name of the ChatService's
	// AddParticipantToRoom RPC.
	ChatServiceAddParticipantToRoomProcedure = "/services.chat.v1.ChatService/AddParticipantToRoom"
	// ChatServiceUpdateRoomProcedure is the fully-qualified name of the ChatService's UpdateRoom RPC.
	ChatServiceUpdateRoomProcedure = "/services.chat.v1.ChatService/UpdateRoom"
	// ChatServiceUpdateParticipantRoomProcedure is the fully-qualified name of the ChatService's
	// UpdateParticipantRoom RPC.
	ChatServiceUpdateParticipantRoomProcedure = "/services.chat.v1.ChatService/UpdateParticipantRoom"
	// ChatServiceBlockUserProcedure is the fully-qualified name of the ChatService's BlockUser RPC.
	ChatServiceBlockUserProcedure = "/services.chat.v1.ChatService/BlockUser"
	// ChatServiceGetSenderMessageProcedure is the fully-qualified name of the ChatService's
	// GetSenderMessage RPC.
	ChatServiceGetSenderMessageProcedure = "/services.chat.v1.ChatService/GetSenderMessage"
	// ChatServiceGetMessageProcedure is the fully-qualified name of the ChatService's GetMessage RPC.
	ChatServiceGetMessageProcedure = "/services.chat.v1.ChatService/GetMessage"
	// ChatServiceGetMessageReadProcedure is the fully-qualified name of the ChatService's
	// GetMessageRead RPC.
	ChatServiceGetMessageReadProcedure = "/services.chat.v1.ChatService/GetMessageRead"
	// ChatServiceGetMessageReactionsProcedure is the fully-qualified name of the ChatService's
	// GetMessageReactions RPC.
	ChatServiceGetMessageReactionsProcedure = "/services.chat.v1.ChatService/GetMessageReactions"
	// ChatServiceMarkMessagesAsReadProcedure is the fully-qualified name of the ChatService's
	// MarkMessagesAsRead RPC.
	ChatServiceMarkMessagesAsReadProcedure = "/services.chat.v1.ChatService/MarkMessagesAsRead"
	// ChatServiceInitialSyncProcedure is the fully-qualified name of the ChatService's InitialSync RPC.
	ChatServiceInitialSyncProcedure = "/services.chat.v1.ChatService/InitialSync"
	// ChatServiceStreamMessagesProcedure is the fully-qualified name of the ChatService's
	// StreamMessages RPC.
	ChatServiceStreamMessagesProcedure = "/services.chat.v1.ChatService/StreamMessages"
)

// ChatServiceClient is a client for the services.chat.v1.ChatService service.
type ChatServiceClient interface {
	// Enviar mensaje
	// ðŸ”’ Need private token to access this endpoint
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	// Editar mensaje existente
	// ðŸ”’ Need private token to access this endpoint
	EditMessage(context.Context, *connect.Request[v1.EditMessageRequest]) (*connect.Response[v1.EditMessageResponse], error)
	// Eliminar mensaje
	// ðŸ”’ Need private token to access this endpoint
	DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error)
	// Reaccionar a un mensaje
	// ðŸ”’ Need private token to access this endpoint
	ReactToMessage(context.Context, *connect.Request[v1.ReactToMessageRequest]) (*connect.Response[v1.ReactToMessageResponse], error)
	// Obtener lista de rooms del usuario
	// ðŸ”’ Need private token to access this endpoint
	GetRooms(context.Context, *connect.Request[v1.GetRoomsRequest]) (*connect.Response[v1.GetRoomsResponse], error)
	// Crear un nuevo room
	// ðŸ”’ Need private token to access this endpoint
	CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error)
	// Obtener un room
	// ðŸ”’ Need private token to access this endpoint
	GetRoom(context.Context, *connect.Request[v1.GetRoomRequest]) (*connect.Response[v1.GetRoomResponse], error)
	// Obtener historial de mensajes de un room
	// ðŸ”’ Need private token to access this endpoint
	GetMessageHistory(context.Context, *connect.Request[v1.GetMessageHistoryRequest]) (*connect.Response[v1.GetMessageHistoryResponse], error)
	// Obtener lista de participantes de un room
	// ðŸ”’ Need private token to access this endpoint
	GetRoomParticipants(context.Context, *connect.Request[v1.GetRoomParticipantsRequest]) (*connect.Response[v1.GetRoomParticipantsResponse], error)
	// Pinnear un room
	// ðŸ”’ Need private token to access this endpoint
	PinRoom(context.Context, *connect.Request[v1.PinRoomRequest]) (*connect.Response[v1.PinRoomResponse], error)
	// Mutear un room
	// ðŸ”’ Need private token to access this endpoint
	MuteRoom(context.Context, *connect.Request[v1.MuteRoomRequest]) (*connect.Response[v1.MuteRoomResponse], error)
	// Salir o sacar a alguien de un room
	// ðŸ”’ Need private token to access this endpoint
	LeaveRoom(context.Context, *connect.Request[v1.LeaveRoomRequest]) (*connect.Response[v1.LeaveRoomResponse], error)
	// Agregar un participante a un room
	// ðŸ”’ Need private token to access this endpoint
	AddParticipantToRoom(context.Context, *connect.Request[v1.AddParticipantToRoomRequest]) (*connect.Response[v1.AddParticipantToRoomResponse], error)
	// Actualizar un room
	// ðŸ”’ Need private token to access this endpoint
	UpdateRoom(context.Context, *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error)
	// Modificar role
	// ðŸ”’ Need private token to access this endpoint
	UpdateParticipantRoom(context.Context, *connect.Request[v1.UpdateParticipantRoomRequest]) (*connect.Response[v1.UpdateParticipantRoomResponse], error)
	// Bloqueo de usuario
	// ðŸ”’ Need private token to access this endpoint
	BlockUser(context.Context, *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error)
	// Obtener mensaje por sender message
	// ðŸ”’ Need private token to access this endpoint
	GetSenderMessage(context.Context, *connect.Request[v1.GetSenderMessageRequest]) (*connect.Response[v1.GetSenderMessageResponse], error)
	// Obtener mensaje
	// ðŸ”’ Need private token to access this endpoint
	GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.MessageData], error)
	// Obtener lecturas de un mensaje por usuario
	// ðŸ”’ Need private token to access this endpoint
	GetMessageRead(context.Context, *connect.Request[v1.GetMessageReadRequest]) (*connect.Response[v1.GetMessageReadResponse], error)
	// Obtener mentions de un mensaje por usuario
	// ðŸ”’ Need private token to access this endpoint
	GetMessageReactions(context.Context, *connect.Request[v1.GetMessageReactionsRequest]) (*connect.Response[v1.GetMessageReactionsResponse], error)
	// Marcar mensajes como leÃ­dos
	// ðŸ”’ Need private token to access this endpoint
	MarkMessagesAsRead(context.Context, *connect.Request[v1.MarkMessagesAsReadRequest]) (*connect.Response[v1.MarkMessagesAsReadResponse], error)
	// SincronizaciÃ³n inicial completa
	// ðŸ”’ Need private token to access this endpoint
	InitialSync(context.Context, *connect.Request[v1.InitialSyncRequest]) (*connect.Response[v1.InitialSyncResponse], error)
	// Stream unidireccional para mensajes en tiempo real
	// ðŸ”’ Need private token to access this endpoint
	StreamMessages(context.Context, *connect.Request[v1.StreamMessagesRequest]) (*connect.ServerStreamForClient[v1.MessageEvent], error)
}

// NewChatServiceClient constructs a client for the services.chat.v1.ChatService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	chatServiceMethods := v1.File_services_chat_v1_service_proto.Services().ByName("ChatService").Methods()
	return &chatServiceClient{
		sendMessage: connect.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+ChatServiceSendMessageProcedure,
			connect.WithSchema(chatServiceMethods.ByName("SendMessage")),
			connect.WithClientOptions(opts...),
		),
		editMessage: connect.NewClient[v1.EditMessageRequest, v1.EditMessageResponse](
			httpClient,
			baseURL+ChatServiceEditMessageProcedure,
			connect.WithSchema(chatServiceMethods.ByName("EditMessage")),
			connect.WithClientOptions(opts...),
		),
		deleteMessage: connect.NewClient[v1.DeleteMessageRequest, v1.DeleteMessageResponse](
			httpClient,
			baseURL+ChatServiceDeleteMessageProcedure,
			connect.WithSchema(chatServiceMethods.ByName("DeleteMessage")),
			connect.WithClientOptions(opts...),
		),
		reactToMessage: connect.NewClient[v1.ReactToMessageRequest, v1.ReactToMessageResponse](
			httpClient,
			baseURL+ChatServiceReactToMessageProcedure,
			connect.WithSchema(chatServiceMethods.ByName("ReactToMessage")),
			connect.WithClientOptions(opts...),
		),
		getRooms: connect.NewClient[v1.GetRoomsRequest, v1.GetRoomsResponse](
			httpClient,
			baseURL+ChatServiceGetRoomsProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetRooms")),
			connect.WithClientOptions(opts...),
		),
		createRoom: connect.NewClient[v1.CreateRoomRequest, v1.CreateRoomResponse](
			httpClient,
			baseURL+ChatServiceCreateRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("CreateRoom")),
			connect.WithClientOptions(opts...),
		),
		getRoom: connect.NewClient[v1.GetRoomRequest, v1.GetRoomResponse](
			httpClient,
			baseURL+ChatServiceGetRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetRoom")),
			connect.WithClientOptions(opts...),
		),
		getMessageHistory: connect.NewClient[v1.GetMessageHistoryRequest, v1.GetMessageHistoryResponse](
			httpClient,
			baseURL+ChatServiceGetMessageHistoryProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetMessageHistory")),
			connect.WithClientOptions(opts...),
		),
		getRoomParticipants: connect.NewClient[v1.GetRoomParticipantsRequest, v1.GetRoomParticipantsResponse](
			httpClient,
			baseURL+ChatServiceGetRoomParticipantsProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetRoomParticipants")),
			connect.WithClientOptions(opts...),
		),
		pinRoom: connect.NewClient[v1.PinRoomRequest, v1.PinRoomResponse](
			httpClient,
			baseURL+ChatServicePinRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("PinRoom")),
			connect.WithClientOptions(opts...),
		),
		muteRoom: connect.NewClient[v1.MuteRoomRequest, v1.MuteRoomResponse](
			httpClient,
			baseURL+ChatServiceMuteRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("MuteRoom")),
			connect.WithClientOptions(opts...),
		),
		leaveRoom: connect.NewClient[v1.LeaveRoomRequest, v1.LeaveRoomResponse](
			httpClient,
			baseURL+ChatServiceLeaveRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("LeaveRoom")),
			connect.WithClientOptions(opts...),
		),
		addParticipantToRoom: connect.NewClient[v1.AddParticipantToRoomRequest, v1.AddParticipantToRoomResponse](
			httpClient,
			baseURL+ChatServiceAddParticipantToRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("AddParticipantToRoom")),
			connect.WithClientOptions(opts...),
		),
		updateRoom: connect.NewClient[v1.UpdateRoomRequest, v1.UpdateRoomResponse](
			httpClient,
			baseURL+ChatServiceUpdateRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("UpdateRoom")),
			connect.WithClientOptions(opts...),
		),
		updateParticipantRoom: connect.NewClient[v1.UpdateParticipantRoomRequest, v1.UpdateParticipantRoomResponse](
			httpClient,
			baseURL+ChatServiceUpdateParticipantRoomProcedure,
			connect.WithSchema(chatServiceMethods.ByName("UpdateParticipantRoom")),
			connect.WithClientOptions(opts...),
		),
		blockUser: connect.NewClient[v1.BlockUserRequest, v1.BlockUserResponse](
			httpClient,
			baseURL+ChatServiceBlockUserProcedure,
			connect.WithSchema(chatServiceMethods.ByName("BlockUser")),
			connect.WithClientOptions(opts...),
		),
		getSenderMessage: connect.NewClient[v1.GetSenderMessageRequest, v1.GetSenderMessageResponse](
			httpClient,
			baseURL+ChatServiceGetSenderMessageProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetSenderMessage")),
			connect.WithClientOptions(opts...),
		),
		getMessage: connect.NewClient[v1.GetMessageRequest, v1.MessageData](
			httpClient,
			baseURL+ChatServiceGetMessageProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetMessage")),
			connect.WithClientOptions(opts...),
		),
		getMessageRead: connect.NewClient[v1.GetMessageReadRequest, v1.GetMessageReadResponse](
			httpClient,
			baseURL+ChatServiceGetMessageReadProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetMessageRead")),
			connect.WithClientOptions(opts...),
		),
		getMessageReactions: connect.NewClient[v1.GetMessageReactionsRequest, v1.GetMessageReactionsResponse](
			httpClient,
			baseURL+ChatServiceGetMessageReactionsProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetMessageReactions")),
			connect.WithClientOptions(opts...),
		),
		markMessagesAsRead: connect.NewClient[v1.MarkMessagesAsReadRequest, v1.MarkMessagesAsReadResponse](
			httpClient,
			baseURL+ChatServiceMarkMessagesAsReadProcedure,
			connect.WithSchema(chatServiceMethods.ByName("MarkMessagesAsRead")),
			connect.WithClientOptions(opts...),
		),
		initialSync: connect.NewClient[v1.InitialSyncRequest, v1.InitialSyncResponse](
			httpClient,
			baseURL+ChatServiceInitialSyncProcedure,
			connect.WithSchema(chatServiceMethods.ByName("InitialSync")),
			connect.WithClientOptions(opts...),
		),
		streamMessages: connect.NewClient[v1.StreamMessagesRequest, v1.MessageEvent](
			httpClient,
			baseURL+ChatServiceStreamMessagesProcedure,
			connect.WithSchema(chatServiceMethods.ByName("StreamMessages")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	sendMessage           *connect.Client[v1.SendMessageRequest, v1.SendMessageResponse]
	editMessage           *connect.Client[v1.EditMessageRequest, v1.EditMessageResponse]
	deleteMessage         *connect.Client[v1.DeleteMessageRequest, v1.DeleteMessageResponse]
	reactToMessage        *connect.Client[v1.ReactToMessageRequest, v1.ReactToMessageResponse]
	getRooms              *connect.Client[v1.GetRoomsRequest, v1.GetRoomsResponse]
	createRoom            *connect.Client[v1.CreateRoomRequest, v1.CreateRoomResponse]
	getRoom               *connect.Client[v1.GetRoomRequest, v1.GetRoomResponse]
	getMessageHistory     *connect.Client[v1.GetMessageHistoryRequest, v1.GetMessageHistoryResponse]
	getRoomParticipants   *connect.Client[v1.GetRoomParticipantsRequest, v1.GetRoomParticipantsResponse]
	pinRoom               *connect.Client[v1.PinRoomRequest, v1.PinRoomResponse]
	muteRoom              *connect.Client[v1.MuteRoomRequest, v1.MuteRoomResponse]
	leaveRoom             *connect.Client[v1.LeaveRoomRequest, v1.LeaveRoomResponse]
	addParticipantToRoom  *connect.Client[v1.AddParticipantToRoomRequest, v1.AddParticipantToRoomResponse]
	updateRoom            *connect.Client[v1.UpdateRoomRequest, v1.UpdateRoomResponse]
	updateParticipantRoom *connect.Client[v1.UpdateParticipantRoomRequest, v1.UpdateParticipantRoomResponse]
	blockUser             *connect.Client[v1.BlockUserRequest, v1.BlockUserResponse]
	getSenderMessage      *connect.Client[v1.GetSenderMessageRequest, v1.GetSenderMessageResponse]
	getMessage            *connect.Client[v1.GetMessageRequest, v1.MessageData]
	getMessageRead        *connect.Client[v1.GetMessageReadRequest, v1.GetMessageReadResponse]
	getMessageReactions   *connect.Client[v1.GetMessageReactionsRequest, v1.GetMessageReactionsResponse]
	markMessagesAsRead    *connect.Client[v1.MarkMessagesAsReadRequest, v1.MarkMessagesAsReadResponse]
	initialSync           *connect.Client[v1.InitialSyncRequest, v1.InitialSyncResponse]
	streamMessages        *connect.Client[v1.StreamMessagesRequest, v1.MessageEvent]
}

// SendMessage calls services.chat.v1.ChatService.SendMessage.
func (c *chatServiceClient) SendMessage(ctx context.Context, req *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// EditMessage calls services.chat.v1.ChatService.EditMessage.
func (c *chatServiceClient) EditMessage(ctx context.Context, req *connect.Request[v1.EditMessageRequest]) (*connect.Response[v1.EditMessageResponse], error) {
	return c.editMessage.CallUnary(ctx, req)
}

// DeleteMessage calls services.chat.v1.ChatService.DeleteMessage.
func (c *chatServiceClient) DeleteMessage(ctx context.Context, req *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error) {
	return c.deleteMessage.CallUnary(ctx, req)
}

// ReactToMessage calls services.chat.v1.ChatService.ReactToMessage.
func (c *chatServiceClient) ReactToMessage(ctx context.Context, req *connect.Request[v1.ReactToMessageRequest]) (*connect.Response[v1.ReactToMessageResponse], error) {
	return c.reactToMessage.CallUnary(ctx, req)
}

// GetRooms calls services.chat.v1.ChatService.GetRooms.
func (c *chatServiceClient) GetRooms(ctx context.Context, req *connect.Request[v1.GetRoomsRequest]) (*connect.Response[v1.GetRoomsResponse], error) {
	return c.getRooms.CallUnary(ctx, req)
}

// CreateRoom calls services.chat.v1.ChatService.CreateRoom.
func (c *chatServiceClient) CreateRoom(ctx context.Context, req *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// GetRoom calls services.chat.v1.ChatService.GetRoom.
func (c *chatServiceClient) GetRoom(ctx context.Context, req *connect.Request[v1.GetRoomRequest]) (*connect.Response[v1.GetRoomResponse], error) {
	return c.getRoom.CallUnary(ctx, req)
}

// GetMessageHistory calls services.chat.v1.ChatService.GetMessageHistory.
func (c *chatServiceClient) GetMessageHistory(ctx context.Context, req *connect.Request[v1.GetMessageHistoryRequest]) (*connect.Response[v1.GetMessageHistoryResponse], error) {
	return c.getMessageHistory.CallUnary(ctx, req)
}

// GetRoomParticipants calls services.chat.v1.ChatService.GetRoomParticipants.
func (c *chatServiceClient) GetRoomParticipants(ctx context.Context, req *connect.Request[v1.GetRoomParticipantsRequest]) (*connect.Response[v1.GetRoomParticipantsResponse], error) {
	return c.getRoomParticipants.CallUnary(ctx, req)
}

// PinRoom calls services.chat.v1.ChatService.PinRoom.
func (c *chatServiceClient) PinRoom(ctx context.Context, req *connect.Request[v1.PinRoomRequest]) (*connect.Response[v1.PinRoomResponse], error) {
	return c.pinRoom.CallUnary(ctx, req)
}

// MuteRoom calls services.chat.v1.ChatService.MuteRoom.
func (c *chatServiceClient) MuteRoom(ctx context.Context, req *connect.Request[v1.MuteRoomRequest]) (*connect.Response[v1.MuteRoomResponse], error) {
	return c.muteRoom.CallUnary(ctx, req)
}

// LeaveRoom calls services.chat.v1.ChatService.LeaveRoom.
func (c *chatServiceClient) LeaveRoom(ctx context.Context, req *connect.Request[v1.LeaveRoomRequest]) (*connect.Response[v1.LeaveRoomResponse], error) {
	return c.leaveRoom.CallUnary(ctx, req)
}

// AddParticipantToRoom calls services.chat.v1.ChatService.AddParticipantToRoom.
func (c *chatServiceClient) AddParticipantToRoom(ctx context.Context, req *connect.Request[v1.AddParticipantToRoomRequest]) (*connect.Response[v1.AddParticipantToRoomResponse], error) {
	return c.addParticipantToRoom.CallUnary(ctx, req)
}

// UpdateRoom calls services.chat.v1.ChatService.UpdateRoom.
func (c *chatServiceClient) UpdateRoom(ctx context.Context, req *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error) {
	return c.updateRoom.CallUnary(ctx, req)
}

// UpdateParticipantRoom calls services.chat.v1.ChatService.UpdateParticipantRoom.
func (c *chatServiceClient) UpdateParticipantRoom(ctx context.Context, req *connect.Request[v1.UpdateParticipantRoomRequest]) (*connect.Response[v1.UpdateParticipantRoomResponse], error) {
	return c.updateParticipantRoom.CallUnary(ctx, req)
}

// BlockUser calls services.chat.v1.ChatService.BlockUser.
func (c *chatServiceClient) BlockUser(ctx context.Context, req *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error) {
	return c.blockUser.CallUnary(ctx, req)
}

// GetSenderMessage calls services.chat.v1.ChatService.GetSenderMessage.
func (c *chatServiceClient) GetSenderMessage(ctx context.Context, req *connect.Request[v1.GetSenderMessageRequest]) (*connect.Response[v1.GetSenderMessageResponse], error) {
	return c.getSenderMessage.CallUnary(ctx, req)
}

// GetMessage calls services.chat.v1.ChatService.GetMessage.
func (c *chatServiceClient) GetMessage(ctx context.Context, req *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.MessageData], error) {
	return c.getMessage.CallUnary(ctx, req)
}

// GetMessageRead calls services.chat.v1.ChatService.GetMessageRead.
func (c *chatServiceClient) GetMessageRead(ctx context.Context, req *connect.Request[v1.GetMessageReadRequest]) (*connect.Response[v1.GetMessageReadResponse], error) {
	return c.getMessageRead.CallUnary(ctx, req)
}

// GetMessageReactions calls services.chat.v1.ChatService.GetMessageReactions.
func (c *chatServiceClient) GetMessageReactions(ctx context.Context, req *connect.Request[v1.GetMessageReactionsRequest]) (*connect.Response[v1.GetMessageReactionsResponse], error) {
	return c.getMessageReactions.CallUnary(ctx, req)
}

// MarkMessagesAsRead calls services.chat.v1.ChatService.MarkMessagesAsRead.
func (c *chatServiceClient) MarkMessagesAsRead(ctx context.Context, req *connect.Request[v1.MarkMessagesAsReadRequest]) (*connect.Response[v1.MarkMessagesAsReadResponse], error) {
	return c.markMessagesAsRead.CallUnary(ctx, req)
}

// InitialSync calls services.chat.v1.ChatService.InitialSync.
func (c *chatServiceClient) InitialSync(ctx context.Context, req *connect.Request[v1.InitialSyncRequest]) (*connect.Response[v1.InitialSyncResponse], error) {
	return c.initialSync.CallUnary(ctx, req)
}

// StreamMessages calls services.chat.v1.ChatService.StreamMessages.
func (c *chatServiceClient) StreamMessages(ctx context.Context, req *connect.Request[v1.StreamMessagesRequest]) (*connect.ServerStreamForClient[v1.MessageEvent], error) {
	return c.streamMessages.CallServerStream(ctx, req)
}

// ChatServiceHandler is an implementation of the services.chat.v1.ChatService service.
type ChatServiceHandler interface {
	// Enviar mensaje
	// ðŸ”’ Need private token to access this endpoint
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	// Editar mensaje existente
	// ðŸ”’ Need private token to access this endpoint
	EditMessage(context.Context, *connect.Request[v1.EditMessageRequest]) (*connect.Response[v1.EditMessageResponse], error)
	// Eliminar mensaje
	// ðŸ”’ Need private token to access this endpoint
	DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error)
	// Reaccionar a un mensaje
	// ðŸ”’ Need private token to access this endpoint
	ReactToMessage(context.Context, *connect.Request[v1.ReactToMessageRequest]) (*connect.Response[v1.ReactToMessageResponse], error)
	// Obtener lista de rooms del usuario
	// ðŸ”’ Need private token to access this endpoint
	GetRooms(context.Context, *connect.Request[v1.GetRoomsRequest]) (*connect.Response[v1.GetRoomsResponse], error)
	// Crear un nuevo room
	// ðŸ”’ Need private token to access this endpoint
	CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error)
	// Obtener un room
	// ðŸ”’ Need private token to access this endpoint
	GetRoom(context.Context, *connect.Request[v1.GetRoomRequest]) (*connect.Response[v1.GetRoomResponse], error)
	// Obtener historial de mensajes de un room
	// ðŸ”’ Need private token to access this endpoint
	GetMessageHistory(context.Context, *connect.Request[v1.GetMessageHistoryRequest]) (*connect.Response[v1.GetMessageHistoryResponse], error)
	// Obtener lista de participantes de un room
	// ðŸ”’ Need private token to access this endpoint
	GetRoomParticipants(context.Context, *connect.Request[v1.GetRoomParticipantsRequest]) (*connect.Response[v1.GetRoomParticipantsResponse], error)
	// Pinnear un room
	// ðŸ”’ Need private token to access this endpoint
	PinRoom(context.Context, *connect.Request[v1.PinRoomRequest]) (*connect.Response[v1.PinRoomResponse], error)
	// Mutear un room
	// ðŸ”’ Need private token to access this endpoint
	MuteRoom(context.Context, *connect.Request[v1.MuteRoomRequest]) (*connect.Response[v1.MuteRoomResponse], error)
	// Salir o sacar a alguien de un room
	// ðŸ”’ Need private token to access this endpoint
	LeaveRoom(context.Context, *connect.Request[v1.LeaveRoomRequest]) (*connect.Response[v1.LeaveRoomResponse], error)
	// Agregar un participante a un room
	// ðŸ”’ Need private token to access this endpoint
	AddParticipantToRoom(context.Context, *connect.Request[v1.AddParticipantToRoomRequest]) (*connect.Response[v1.AddParticipantToRoomResponse], error)
	// Actualizar un room
	// ðŸ”’ Need private token to access this endpoint
	UpdateRoom(context.Context, *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error)
	// Modificar role
	// ðŸ”’ Need private token to access this endpoint
	UpdateParticipantRoom(context.Context, *connect.Request[v1.UpdateParticipantRoomRequest]) (*connect.Response[v1.UpdateParticipantRoomResponse], error)
	// Bloqueo de usuario
	// ðŸ”’ Need private token to access this endpoint
	BlockUser(context.Context, *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error)
	// Obtener mensaje por sender message
	// ðŸ”’ Need private token to access this endpoint
	GetSenderMessage(context.Context, *connect.Request[v1.GetSenderMessageRequest]) (*connect.Response[v1.GetSenderMessageResponse], error)
	// Obtener mensaje
	// ðŸ”’ Need private token to access this endpoint
	GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.MessageData], error)
	// Obtener lecturas de un mensaje por usuario
	// ðŸ”’ Need private token to access this endpoint
	GetMessageRead(context.Context, *connect.Request[v1.GetMessageReadRequest]) (*connect.Response[v1.GetMessageReadResponse], error)
	// Obtener mentions de un mensaje por usuario
	// ðŸ”’ Need private token to access this endpoint
	GetMessageReactions(context.Context, *connect.Request[v1.GetMessageReactionsRequest]) (*connect.Response[v1.GetMessageReactionsResponse], error)
	// Marcar mensajes como leÃ­dos
	// ðŸ”’ Need private token to access this endpoint
	MarkMessagesAsRead(context.Context, *connect.Request[v1.MarkMessagesAsReadRequest]) (*connect.Response[v1.MarkMessagesAsReadResponse], error)
	// SincronizaciÃ³n inicial completa
	// ðŸ”’ Need private token to access this endpoint
	InitialSync(context.Context, *connect.Request[v1.InitialSyncRequest]) (*connect.Response[v1.InitialSyncResponse], error)
	// Stream unidireccional para mensajes en tiempo real
	// ðŸ”’ Need private token to access this endpoint
	StreamMessages(context.Context, *connect.Request[v1.StreamMessagesRequest], *connect.ServerStream[v1.MessageEvent]) error
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatServiceMethods := v1.File_services_chat_v1_service_proto.Services().ByName("ChatService").Methods()
	chatServiceSendMessageHandler := connect.NewUnaryHandler(
		ChatServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(chatServiceMethods.ByName("SendMessage")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceEditMessageHandler := connect.NewUnaryHandler(
		ChatServiceEditMessageProcedure,
		svc.EditMessage,
		connect.WithSchema(chatServiceMethods.ByName("EditMessage")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceDeleteMessageHandler := connect.NewUnaryHandler(
		ChatServiceDeleteMessageProcedure,
		svc.DeleteMessage,
		connect.WithSchema(chatServiceMethods.ByName("DeleteMessage")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceReactToMessageHandler := connect.NewUnaryHandler(
		ChatServiceReactToMessageProcedure,
		svc.ReactToMessage,
		connect.WithSchema(chatServiceMethods.ByName("ReactToMessage")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetRoomsHandler := connect.NewUnaryHandler(
		ChatServiceGetRoomsProcedure,
		svc.GetRooms,
		connect.WithSchema(chatServiceMethods.ByName("GetRooms")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceCreateRoomHandler := connect.NewUnaryHandler(
		ChatServiceCreateRoomProcedure,
		svc.CreateRoom,
		connect.WithSchema(chatServiceMethods.ByName("CreateRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetRoomHandler := connect.NewUnaryHandler(
		ChatServiceGetRoomProcedure,
		svc.GetRoom,
		connect.WithSchema(chatServiceMethods.ByName("GetRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetMessageHistoryHandler := connect.NewUnaryHandler(
		ChatServiceGetMessageHistoryProcedure,
		svc.GetMessageHistory,
		connect.WithSchema(chatServiceMethods.ByName("GetMessageHistory")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetRoomParticipantsHandler := connect.NewUnaryHandler(
		ChatServiceGetRoomParticipantsProcedure,
		svc.GetRoomParticipants,
		connect.WithSchema(chatServiceMethods.ByName("GetRoomParticipants")),
		connect.WithHandlerOptions(opts...),
	)
	chatServicePinRoomHandler := connect.NewUnaryHandler(
		ChatServicePinRoomProcedure,
		svc.PinRoom,
		connect.WithSchema(chatServiceMethods.ByName("PinRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceMuteRoomHandler := connect.NewUnaryHandler(
		ChatServiceMuteRoomProcedure,
		svc.MuteRoom,
		connect.WithSchema(chatServiceMethods.ByName("MuteRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceLeaveRoomHandler := connect.NewUnaryHandler(
		ChatServiceLeaveRoomProcedure,
		svc.LeaveRoom,
		connect.WithSchema(chatServiceMethods.ByName("LeaveRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceAddParticipantToRoomHandler := connect.NewUnaryHandler(
		ChatServiceAddParticipantToRoomProcedure,
		svc.AddParticipantToRoom,
		connect.WithSchema(chatServiceMethods.ByName("AddParticipantToRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceUpdateRoomHandler := connect.NewUnaryHandler(
		ChatServiceUpdateRoomProcedure,
		svc.UpdateRoom,
		connect.WithSchema(chatServiceMethods.ByName("UpdateRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceUpdateParticipantRoomHandler := connect.NewUnaryHandler(
		ChatServiceUpdateParticipantRoomProcedure,
		svc.UpdateParticipantRoom,
		connect.WithSchema(chatServiceMethods.ByName("UpdateParticipantRoom")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceBlockUserHandler := connect.NewUnaryHandler(
		ChatServiceBlockUserProcedure,
		svc.BlockUser,
		connect.WithSchema(chatServiceMethods.ByName("BlockUser")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetSenderMessageHandler := connect.NewUnaryHandler(
		ChatServiceGetSenderMessageProcedure,
		svc.GetSenderMessage,
		connect.WithSchema(chatServiceMethods.ByName("GetSenderMessage")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetMessageHandler := connect.NewUnaryHandler(
		ChatServiceGetMessageProcedure,
		svc.GetMessage,
		connect.WithSchema(chatServiceMethods.ByName("GetMessage")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetMessageReadHandler := connect.NewUnaryHandler(
		ChatServiceGetMessageReadProcedure,
		svc.GetMessageRead,
		connect.WithSchema(chatServiceMethods.ByName("GetMessageRead")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetMessageReactionsHandler := connect.NewUnaryHandler(
		ChatServiceGetMessageReactionsProcedure,
		svc.GetMessageReactions,
		connect.WithSchema(chatServiceMethods.ByName("GetMessageReactions")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceMarkMessagesAsReadHandler := connect.NewUnaryHandler(
		ChatServiceMarkMessagesAsReadProcedure,
		svc.MarkMessagesAsRead,
		connect.WithSchema(chatServiceMethods.ByName("MarkMessagesAsRead")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceInitialSyncHandler := connect.NewUnaryHandler(
		ChatServiceInitialSyncProcedure,
		svc.InitialSync,
		connect.WithSchema(chatServiceMethods.ByName("InitialSync")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceStreamMessagesHandler := connect.NewServerStreamHandler(
		ChatServiceStreamMessagesProcedure,
		svc.StreamMessages,
		connect.WithSchema(chatServiceMethods.ByName("StreamMessages")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/services.chat.v1.ChatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatServiceSendMessageProcedure:
			chatServiceSendMessageHandler.ServeHTTP(w, r)
		case ChatServiceEditMessageProcedure:
			chatServiceEditMessageHandler.ServeHTTP(w, r)
		case ChatServiceDeleteMessageProcedure:
			chatServiceDeleteMessageHandler.ServeHTTP(w, r)
		case ChatServiceReactToMessageProcedure:
			chatServiceReactToMessageHandler.ServeHTTP(w, r)
		case ChatServiceGetRoomsProcedure:
			chatServiceGetRoomsHandler.ServeHTTP(w, r)
		case ChatServiceCreateRoomProcedure:
			chatServiceCreateRoomHandler.ServeHTTP(w, r)
		case ChatServiceGetRoomProcedure:
			chatServiceGetRoomHandler.ServeHTTP(w, r)
		case ChatServiceGetMessageHistoryProcedure:
			chatServiceGetMessageHistoryHandler.ServeHTTP(w, r)
		case ChatServiceGetRoomParticipantsProcedure:
			chatServiceGetRoomParticipantsHandler.ServeHTTP(w, r)
		case ChatServicePinRoomProcedure:
			chatServicePinRoomHandler.ServeHTTP(w, r)
		case ChatServiceMuteRoomProcedure:
			chatServiceMuteRoomHandler.ServeHTTP(w, r)
		case ChatServiceLeaveRoomProcedure:
			chatServiceLeaveRoomHandler.ServeHTTP(w, r)
		case ChatServiceAddParticipantToRoomProcedure:
			chatServiceAddParticipantToRoomHandler.ServeHTTP(w, r)
		case ChatServiceUpdateRoomProcedure:
			chatServiceUpdateRoomHandler.ServeHTTP(w, r)
		case ChatServiceUpdateParticipantRoomProcedure:
			chatServiceUpdateParticipantRoomHandler.ServeHTTP(w, r)
		case ChatServiceBlockUserProcedure:
			chatServiceBlockUserHandler.ServeHTTP(w, r)
		case ChatServiceGetSenderMessageProcedure:
			chatServiceGetSenderMessageHandler.ServeHTTP(w, r)
		case ChatServiceGetMessageProcedure:
			chatServiceGetMessageHandler.ServeHTTP(w, r)
		case ChatServiceGetMessageReadProcedure:
			chatServiceGetMessageReadHandler.ServeHTTP(w, r)
		case ChatServiceGetMessageReactionsProcedure:
			chatServiceGetMessageReactionsHandler.ServeHTTP(w, r)
		case ChatServiceMarkMessagesAsReadProcedure:
			chatServiceMarkMessagesAsReadHandler.ServeHTTP(w, r)
		case ChatServiceInitialSyncProcedure:
			chatServiceInitialSyncHandler.ServeHTTP(w, r)
		case ChatServiceStreamMessagesProcedure:
			chatServiceStreamMessagesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.SendMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) EditMessage(context.Context, *connect.Request[v1.EditMessageRequest]) (*connect.Response[v1.EditMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.EditMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.DeleteMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) ReactToMessage(context.Context, *connect.Request[v1.ReactToMessageRequest]) (*connect.Response[v1.ReactToMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.ReactToMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) GetRooms(context.Context, *connect.Request[v1.GetRoomsRequest]) (*connect.Response[v1.GetRoomsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.GetRooms is not implemented"))
}

func (UnimplementedChatServiceHandler) CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest]) (*connect.Response[v1.CreateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.CreateRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) GetRoom(context.Context, *connect.Request[v1.GetRoomRequest]) (*connect.Response[v1.GetRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.GetRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) GetMessageHistory(context.Context, *connect.Request[v1.GetMessageHistoryRequest]) (*connect.Response[v1.GetMessageHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.GetMessageHistory is not implemented"))
}

func (UnimplementedChatServiceHandler) GetRoomParticipants(context.Context, *connect.Request[v1.GetRoomParticipantsRequest]) (*connect.Response[v1.GetRoomParticipantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.GetRoomParticipants is not implemented"))
}

func (UnimplementedChatServiceHandler) PinRoom(context.Context, *connect.Request[v1.PinRoomRequest]) (*connect.Response[v1.PinRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.PinRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) MuteRoom(context.Context, *connect.Request[v1.MuteRoomRequest]) (*connect.Response[v1.MuteRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.MuteRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) LeaveRoom(context.Context, *connect.Request[v1.LeaveRoomRequest]) (*connect.Response[v1.LeaveRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.LeaveRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) AddParticipantToRoom(context.Context, *connect.Request[v1.AddParticipantToRoomRequest]) (*connect.Response[v1.AddParticipantToRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.AddParticipantToRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) UpdateRoom(context.Context, *connect.Request[v1.UpdateRoomRequest]) (*connect.Response[v1.UpdateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.UpdateRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) UpdateParticipantRoom(context.Context, *connect.Request[v1.UpdateParticipantRoomRequest]) (*connect.Response[v1.UpdateParticipantRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.UpdateParticipantRoom is not implemented"))
}

func (UnimplementedChatServiceHandler) BlockUser(context.Context, *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.BlockUser is not implemented"))
}

func (UnimplementedChatServiceHandler) GetSenderMessage(context.Context, *connect.Request[v1.GetSenderMessageRequest]) (*connect.Response[v1.GetSenderMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.GetSenderMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.MessageData], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.GetMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) GetMessageRead(context.Context, *connect.Request[v1.GetMessageReadRequest]) (*connect.Response[v1.GetMessageReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.GetMessageRead is not implemented"))
}

func (UnimplementedChatServiceHandler) GetMessageReactions(context.Context, *connect.Request[v1.GetMessageReactionsRequest]) (*connect.Response[v1.GetMessageReactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.GetMessageReactions is not implemented"))
}

func (UnimplementedChatServiceHandler) MarkMessagesAsRead(context.Context, *connect.Request[v1.MarkMessagesAsReadRequest]) (*connect.Response[v1.MarkMessagesAsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.MarkMessagesAsRead is not implemented"))
}

func (UnimplementedChatServiceHandler) InitialSync(context.Context, *connect.Request[v1.InitialSyncRequest]) (*connect.Response[v1.InitialSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.InitialSync is not implemented"))
}

func (UnimplementedChatServiceHandler) StreamMessages(context.Context, *connect.Request[v1.StreamMessagesRequest], *connect.ServerStream[v1.MessageEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("services.chat.v1.ChatService.StreamMessages is not implemented"))
}
