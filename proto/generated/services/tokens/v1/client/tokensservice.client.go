// Code generated by campaing-app-api-cli. DO NOT EDIT.
//
// source: services/tokens/v1/service.proto

package tokensv1client

import (
	context "context"
	tls "crypto/tls"
	log "log"
	net "net"
	http "net/http"
	strings "strings"
	sync "sync"

	connect "connectrpc.com/connect"
	catalogs "github.com/Venqis-NolaTech/campaing-app-chat-messages-api-go/catalogs"
	v1 "github.com/Venqis-NolaTech/campaing-app-chat-messages-api-go/proto/generated/services/tokens/v1"
	tokensv1connect "github.com/Venqis-NolaTech/campaing-app-chat-messages-api-go/proto/generated/services/tokens/v1/tokensv1connect"
	api "github.com/Venqis-NolaTech/campaing-app-core-go/pkg/api"
	http2 "golang.org/x/net/http2"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

var (
	muTokensService            = sync.Mutex{}
	clientsTokensService       = map[string]tokensv1connect.TokensServiceClient{}
	h2cHttpTokensServiceClient = &http.Client{
		CheckRedirect: func(_ *http.Request, _ []*http.Request) error {
			return http.ErrUseLastResponse
		},
		Transport: &http2.Transport{
			AllowHTTP: true,
			DialTLS: func(network, addr string, _ *tls.Config) (net.Conn, error) {
				return net.Dial(network, addr)
			},
		},
	}
)

func instanceNewTokensServiceClient(addr string) tokensv1connect.TokensServiceClient {
	client := h2cHttpTokensServiceClient
	if strings.HasPrefix(addr, "https://") {
		client = &http.Client{}
	}
	return tokensv1connect.NewTokensServiceClient(
		client,
		addr,
		connect.WithHTTPGet(),
	)
}

// Instance a new client for `services.tokens.v1.TokensService`
func GetTokensServiceClient() tokensv1connect.TokensServiceClient {
	addr := catalogs.ClientAddress()
	var client tokensv1connect.TokensServiceClient
	muTokensService.Lock()
	defer muTokensService.Unlock()
	if c, ok := clientsTokensService[addr]; ok && c != nil {
		client = c
	} else {
		client = instanceNewTokensServiceClient(addr)
		clientsTokensService[addr] = client
	}
	return client
}

// Do a remote call for `services.tokens.v1.TokensService@SaveToken(v1.SaveTokenRequest) -> v1.SaveTokenResponse`
// This method requires a `api.GeneralParams` argument
func SaveToken(ctx context.Context, generalParams api.GeneralParams, req *v1.SaveTokenRequest) (*v1.SaveTokenResponse, error) {
	jsonReq, _ := protojson.Marshal(req)
	log.Println("PROCESSING UNARY GRPC METHOD: services.tokens.v1.TokensService@SaveToken(v1.SaveTokenRequest) -> v1.SaveTokenResponse")
	log.Printf("UNARY GRPC REQUEST: v1.SaveTokenRequest -> %s\n", string(jsonReq))
	var response *v1.SaveTokenResponse
	rpcRequest, err := api.NewRequest(generalParams, req)
	if err != nil {
		return response, err
	}
	rpcResponse, err := GetTokensServiceClient().SaveToken(ctx, rpcRequest)
	if rpcResponse != nil {
		response = rpcResponse.Msg
		jsonRes, _ := protojson.Marshal(response)
		log.Printf("UNARY GRPC RESPONSE: v1.SaveTokenResponse -> %s\n", string(jsonRes))
	}
	return response, err
}
