// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/tokens/v1/service.proto

package tokensv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Venqis-NolaTech/campaing-app-chat-messages-api-go/proto/generated/services/tokens/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TokensServiceName is the fully-qualified name of the TokensService service.
	TokensServiceName = "services.tokens.v1.TokensService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TokensServiceSaveTokenProcedure is the fully-qualified name of the TokensService's SaveToken RPC.
	TokensServiceSaveTokenProcedure = "/services.tokens.v1.TokensService/SaveToken"
)

// TokensServiceClient is a client for the services.tokens.v1.TokensService service.
type TokensServiceClient interface {
	// ðŸ”’ Need private token to access this endpoint
	// - platform: IOS, ANDROID, WEB
	SaveToken(context.Context, *connect.Request[v1.SaveTokenRequest]) (*connect.Response[v1.SaveTokenResponse], error)
}

// NewTokensServiceClient constructs a client for the services.tokens.v1.TokensService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokensServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TokensServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tokensServiceMethods := v1.File_services_tokens_v1_service_proto.Services().ByName("TokensService").Methods()
	return &tokensServiceClient{
		saveToken: connect.NewClient[v1.SaveTokenRequest, v1.SaveTokenResponse](
			httpClient,
			baseURL+TokensServiceSaveTokenProcedure,
			connect.WithSchema(tokensServiceMethods.ByName("SaveToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tokensServiceClient implements TokensServiceClient.
type tokensServiceClient struct {
	saveToken *connect.Client[v1.SaveTokenRequest, v1.SaveTokenResponse]
}

// SaveToken calls services.tokens.v1.TokensService.SaveToken.
func (c *tokensServiceClient) SaveToken(ctx context.Context, req *connect.Request[v1.SaveTokenRequest]) (*connect.Response[v1.SaveTokenResponse], error) {
	return c.saveToken.CallUnary(ctx, req)
}

// TokensServiceHandler is an implementation of the services.tokens.v1.TokensService service.
type TokensServiceHandler interface {
	// ðŸ”’ Need private token to access this endpoint
	// - platform: IOS, ANDROID, WEB
	SaveToken(context.Context, *connect.Request[v1.SaveTokenRequest]) (*connect.Response[v1.SaveTokenResponse], error)
}

// NewTokensServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokensServiceHandler(svc TokensServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tokensServiceMethods := v1.File_services_tokens_v1_service_proto.Services().ByName("TokensService").Methods()
	tokensServiceSaveTokenHandler := connect.NewUnaryHandler(
		TokensServiceSaveTokenProcedure,
		svc.SaveToken,
		connect.WithSchema(tokensServiceMethods.ByName("SaveToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/services.tokens.v1.TokensService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TokensServiceSaveTokenProcedure:
			tokensServiceSaveTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTokensServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTokensServiceHandler struct{}

func (UnimplementedTokensServiceHandler) SaveToken(context.Context, *connect.Request[v1.SaveTokenRequest]) (*connect.Response[v1.SaveTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.tokens.v1.TokensService.SaveToken is not implemented"))
}
